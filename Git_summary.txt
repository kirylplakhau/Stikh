Git - распределенная система контроля версий.

Установка : для работы с операционной системой Windows лучше использовать Git Bash. При работе с Linux - sudo apt-get install git.

НАСТРОЙКА: git config --global user.name"[name]" - логин.
	   git config --global user.email"[email address]" - email. 
	   git config --global color.ui auto - вкл. подсветку текста.
	   git config --global core.editor "[program]" - установка редактора по умолчанию.

РЕПОЗИТОРИЙ - специально настроенное окружение.
Репозитории: 1. Локальные (local). 2. Удаленные (remote).

Порядок работы: 1. Создание. 2. Изменения. 3. Публикация. 4. Синхронизация.

* git init - создает пустой репозиторий в текущей местоположении, путем добавления своей системной папки.
* git status - определяет текущее состояние репозитория.
* git remote add origin [url] - подключает локальный репозиторий к удаленному.
* git remote -v - возвращает список подключенных удаленных соединений.

COMMIT - запись текущего состояния в историю изменений.

* git add [file name] - добавляет файл в индекс изменений.
* git add . - добавит в индекс изменений все файлы и директории.
* git rm --cached - удаляет файлы из индекса изменений.
* git commit - создание коммита. Откроется текстовый редактор для записи сообщения.
* git commit -m '<message text>' - запись коммита с сообщением.
* git git commit -a = git add + git commit.
* git commit -am '<message text>' = git add + git commit -m '<message text>'.
* git commit --amend - 

ИСТОРИЯ ИЗМЕНЕНИЙ

* git log - вернет информацию о каждом коммите.
* git log --oneline - вернет информацию о каждом коммите в удобно читаемом виде.
* git reset [хэш коммита] - откат к определенному коммииту.
* git reflog - вернет подробную историю (все операции при работе с репозиторием).
* git revert [хэш коммита] - создает новый коммит, который отменяет действия в предыдущем.
* git restore - сброс состояния текущего репозитория на состояние последнего коммита.
* git reset --hard - сброс состояния текущего репозитория на последний коммит.

РАБОТА С ВЕТКАМИ РЕПОЗИТОРИЯ

Ветка master (либо main(github)) - основная ветка.

* git branch - вернет список веток в репозитории.
* git checkout [branch name] - переключение на указанную ветку.
* git branch [name] - создание ветки.
* git branch [name_1] [name_2] - создание ветки с указанием точки старта.
* git checkout -b [name] - ссоздание ветки в момент переключения.

СЛИЯНИЕ ВЕТОК

* git merge [имя присоединяемой ветки] - добавляет все изменения в текущую ветку из указанной.
* git rebase master - операция смены базовой ветки. Перезапишет последний коммит.
* git push --force - перезапишет удаленную ветку на текущую (принудительно).

STASH - специальное пространство, которое хранится на локальном компьютере и записывает все текущие изменения, отменяя состояния самого репозитория.
Позволяет переключать ветку при несохраненных данных.

* git stash - вкл. стэш.
* git stash list - возвращает список доступных (текущих) стэшей.
* git stash push - [file name] - добавит в существующий на текущей ветке стэш новый файл.
* git stash pop [stash name] - отменяет стэш и разворачивание его на текущей ветке.

SQUASH - склеивание коммитов.

* git merge [branch name] --squash - объединит изменения всех коммитов ветки [name], перенесет их в ветку master и добавит в индекс. 
При этом коммит слияния не будет создан, вам нужно будет сделать его вручную.
* git rebase -i HEAD~<commits amount> - объединит указанное количество коммитов в рамках одного и дальнейшего слияния.

CHERRY PICK - позволяет скопировать изменения коммита и записать новый коммит на текущей ветке.

* git cherry-pick [хэш коммита] - преносит конкретный коммит на текущую ветку.
* git cherry-pick [branch] - переносит последний коммит ветки.
* git cherry-pick..[branch] - перенесет все коммиты с ветки.

УПРАВЛЕНИЕ ВЕРСИЯМИ

* git tag [tag name] - создает тег.
* git tag - просмотр тегов.
* git push --tags - загрузка тегов в удаленный репозиторий.
* git tag -d [tag name] - удаляет тег.
* git push --delete origin [tag name] - удаляет тег в удаленном репозитории.

** git clone [URL] <folder name> - создание копии удаленного репозитория на локальном компьютере в указанной папке.
** git push - отправляет данные на сервер, в удаленный репозиторий.
** git push -u origin [branch name] - загружает и одновременно создает ветку в удаленном репозитории.
** git pull - автоматически скачивает и затем вливает данные из удалённой ветки в вашу текущую ветку.
** git fetch [имя удал. сервера] - собирает все коммиты из целевой ветки, которых нет в текущей ветке, и сохраняет их в локальном репозитории. Однако он не сливает их в текущую ветку.
** git diff - используется для вычисления разницы между любыми двумя Git деревьями. 
Это может быть разница между вашей рабочей копией и индексом (собственно git diff), 
разница между индексом и последним коммитом (git diff --staged), или между любыми двумя коммитами (git diff master branchB).
* .gitignore - в данный файл записывают имена файлов, которые будут игнорироваться и не будут добавляться в индекс изменений.
* .gitkeep - сохраняет пустые директории в общем репозитории.

Настройка SSH:
* В терминале вводим команду ssh-keygen / жмем Enter / жмем Enter / жмем Enter / -> .ssh/id_rsa.pub / cat [путь к файлу .ssh/id_rsa.pub]
На GitHub: Пользователь / Settings / SSH and GPG keys / New SSH key / Вводим имя ключа и содержимое файла .ssh/id_rsa.pub .

* Fork-репозиторий - копия оригинального репозитория.
Порядок работы с fork:
1. Создание fork.
2. Клонирование.
3. Разработка (внесение изменений).
4. Публикация.
5. Создание pull-request.


БАЗОВЫЕ КОМАНДЫ для работы в Git Bash и Terminal:

* cd <dir name> - смена директории на указанную.
* cd .. - перемещение в директорию на уровень выше.
* echo '<text>' > <file name> - запись текста в указанный файл.
* echo '<text>' >> <file name> - дозапись текста в конец указанного файла.
* touch <file name> - создание файла.
* rm <file name> - удаление файла.
* mkdir - создание директории.
* rmdir -R - удаление директории со всем ее содержимым.
* pwd - укажет текущее местоположение (директорию).
* cat <file name> - чтение содержимого файла.